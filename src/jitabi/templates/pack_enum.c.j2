{%- import "macros.c.j2" as m -%}

{%- macro pack_fn(call, indent_count=8) -%}
pack_{{ call.resolved_name }}(
{%- call m.indent(indent_count) %}
    __obj
    {%- for a in call.args %}
    , {{ a }}
    {%- endfor %}
    , __dst + __varint_len
    , __dst_len - __varint_len
);
{% endcall -%}
{%- endmacro -%}

static ssize_t pack_{{ enum_name }}(PyObject *__obj, char *__dst, size_t __dst_len)
{
    if (__dst_len < 1) {
        PyErr_SetString(PyExc_ValueError, "output buffer too small");
        return -1;
    }

    ssize_t __var_index = -1;

    {% for t in input_types -%}
    {% if t == "dict" -%}
    if (PyDict_Check(__obj)) {
        PyObject *__type_obj = PyDict_GetItemString(__obj, "type");
        if (__type_obj) {
            if (!PyUnicode_Check(__type_obj)) {
                PyErr_SetString(PyExc_TypeError, "enum {{ enum_name }} must have a string \"type\" field");
                return -1;
            }

            const char *__type_str = PyUnicode_AsUTF8(__type_obj);
            if (!__type_str) return -1;

            {% for v in variants -%}
            if (strcmp(__type_str, "{{ v.name }}") == 0) {
                __var_index = {{ loop.index0 }};
                goto validate;
            }
            {%- endfor %}
        }
    }
    {%- elif t == "bool" %}
    if (PyBool_Check(__obj)) {
        __var_index = {{ targets['bool'] }};
        goto validate;
    }
    {%- elif t == "int" %}
    if (PyLong_Check(__obj)) {
        __var_index = {{ targets['int'] }};
        goto validate;
    }
    {%- elif t == "float" %}
    if (PyFloat_Check(__obj)) {
        __var_index = {{ targets['float'] }};
        goto validate;
    }
    {%- elif t == "bytes" %}
    if (PyBytes_Check(__obj)) {
        __var_index = {{ targets['bytes'] }};
        goto validate;
    }
    {%- elif t == "str" %}
    if (PyUnicode_Check(__obj)) {
        __var_index = {{ targets['str'] }};
        goto validate;
    }
    {%- endif %}
    {% endfor %}

validate:
    if (__var_index < 0) {
        PyErr_SetString(PyExc_ValueError, "unknown enum variant for {{ enum_name }}");
        return -1;
    }

    char __len_buf[10];
    ssize_t __varint_len = encode_varuint32((unsigned long long)__var_index, (char *)__len_buf);
    if ((size_t)(__varint_len) > __dst_len) return -1;
    memcpy(__dst, __len_buf, (size_t)__varint_len);

    ssize_t __inner = 0;

    // variant dispatch
{%- for v in variants %}
    if (__var_index == {{ loop.index0 }}) {
        __inner = {{ pack_fn(v.call) }}
        if (__inner < 0) {
            PyErr_SetString(PyExc_TypeError, "variant {{ v.call.original_name }} pack fn raised");
            return -1;
        }
        return __varint_len + __inner;
    }
{%- endfor %}

    PyErr_SetString(PyExc_ValueError, "passed jmp table.. unknown enum variant for {{ enum_name }}");
    return -1;
}
