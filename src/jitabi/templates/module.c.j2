#define PY_SSIZE_T_CLEAN
#include <Python.h>

#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stdio.h>
#include <limits.h>

#if !(defined(__JITABI_UNPACK) || defined(__JITABI_PACK))
    #error "one of __JITABI_PACK or __JITABI_UNPACK must be defined"
#endif

#ifdef _MSC_VER

#include <BaseTsd.h>
typedef SSIZE_T  ssize_t;

#endif

#if defined(_MSC_VER) && !defined(__clang__)

    #define JITABI_INLINE __inline

#else

    #define JITABI_INLINE inline

#endif

#ifdef __JITABI_DEBUG
#include <stdarg.h>
// logging

// Static variables
static PyObject *logger_debug = NULL;
static PyObject *logger_info = NULL;
static PyObject *logger_warning = NULL;
static PyObject *logger_error = NULL;

// Called during PyMODINIT_FUNC (i.e., module init)
static int init_logging_handles(void) {
    PyObject *logging = PyImport_ImportModule("logging");
    if (!logging) return -1;

    PyObject *getLogger = PyObject_GetAttrString(logging, "getLogger");
    if (!getLogger || !PyCallable_Check(getLogger)) {
        Py_XDECREF(getLogger);
        Py_DECREF(logging);
        return -1;
    }

    PyObject *name = PyUnicode_FromString("jitabi.{{ m_name }}");
    PyObject *logger = PyObject_CallOneArg(getLogger, name);
    Py_DECREF(name);
    Py_DECREF(getLogger);
    Py_DECREF(logging);

    if (!logger) return -1;

    #define GET_LMETHOD(var, method) do {                          \
        var = PyObject_GetAttrString(logger, method);              \
        if (!var || !PyCallable_Check(var)) {                      \
            Py_XDECREF(var);                                       \
            Py_DECREF(logger);                                     \
            return -1;                                             \
        }                                                          \
    } while (0)

    GET_LMETHOD(logger_debug, "debug");
    GET_LMETHOD(logger_info, "info");
    GET_LMETHOD(logger_warning, "warning");
    GET_LMETHOD(logger_error, "error");

    #undef GET_LMETHOD
    Py_DECREF(logger);

    // Success
    return 0;
}

static void module_free(void *m) {
    Py_XDECREF(logger_debug);
    logger_debug = NULL;

    Py_XDECREF(logger_info);
    logger_info = NULL;

    Py_XDECREF(logger_warning);
    logger_warning = NULL;

    Py_XDECREF(logger_error);
    logger_error = NULL;
}

static void logger_logf(PyObject *fn, const char *fmt, ...)
{
    if (!fn) return;

    char buf[512];
    va_list args;
    va_start(args, fmt);
    vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);

    PyObject *msg = PyUnicode_FromString(buf);
    if (!msg) return;

    PyObject *res = PyObject_CallOneArg(fn, msg);
    Py_XDECREF(res);
    Py_DECREF(msg);
}

#define JITABI_LOG_DEBUG(...) logger_logf(logger_debug,   __VA_ARGS__)
#define JITABI_LOG_INFO(...)  logger_logf(logger_info,    __VA_ARGS__)
#define JITABI_LOG_WARN(...)  logger_logf(logger_warning, __VA_ARGS__)
#define JITABI_LOG_ERROR(...) logger_logf(logger_error,   __VA_ARGS__)

#else

#define JITABI_LOG_DEBUG(...) ((void)0)
#define JITABI_LOG_INFO(...)  ((void)0)
#define JITABI_LOG_WARN(...)  ((void)0)
#define JITABI_LOG_ERROR(...) ((void)0)

#endif

#ifdef __JITABI_UNPACK

{% include "unpack_std.c" %}

// forward declarations
{% for f in functions %}
static PyObject *unpack_{{ f.name }}(const char *buffer, size_t buffer_len, size_t *consumed);
{% endfor -%}
{% for a in aliases %}
static PyObject *unpack_{{ a.alias }}(const char *buffer, size_t buffer_len, size_t *consumed);
{% endfor -%}

{% for f in functions %}

{{ f.unpack_code }}
{%- endfor -%}
{% for a in aliases %}

{{ a.unpack_code }}
{%- endfor %}


#define DEF_UNPACK_WRAPPER(pyname, cfunc)                                \
    static PyObject *pyname(PyObject *self, PyObject *arg)               \
    {                                                                    \
        if (!PyBytes_Check(arg)) {                                       \
            PyErr_SetString(PyExc_TypeError, "expected a bytes object"); \
            return NULL;                                                 \
        }                                                                \
        Py_ssize_t len;                                                  \
        char *buf;                                                       \
        PyBytes_AsStringAndSize(arg, &buf, &len);                        \
        return cfunc(buf, (size_t)len, NULL);                            \
    }

// structs & enums
{%- for f in functions %}
DEF_UNPACK_WRAPPER (py_unpack_{{ f.name }}, unpack_{{ f.name }})
{%- endfor %}

// aliases
{%- for a in aliases %}
DEF_UNPACK_WRAPPER (py_unpack_{{ a.alias }}, unpack_{{ a.alias }})
{%- endfor %}

// type dispatch
typedef PyObject *(*unpack_fn_t)(const char *, size_t, size_t *);

struct dispatch_entry {
    const char  *name;
    unpack_fn_t ufn;
};

/* table is terminated by {NULL, NULL} for easy iteration */
static const struct dispatch_entry _DISPATCH[] = {
    {"bool",      unpack_bool},

    {"uint8",     unpack_uint8},
    {"uint16",    unpack_uint16},
    {"uint32",    unpack_uint32},
    {"uint64",    unpack_uint64},
    {"uint128",   unpack_uint128},

    {"int8",      unpack_int8},
    {"int16",     unpack_int16},
    {"int32",     unpack_int32},
    {"int64",     unpack_int64},
    {"int128",    unpack_int128},

    {"varuint32", unpack_varuint32},
    {"varint32",  unpack_varint32},

    {"float32",   unpack_float32},
    {"float64",   unpack_float64},

    {"bytes",     unpack_bytes},
    {"str",       unpack_string},

{%- for f in functions %}
    {"{{ f.name }}", unpack_{{ f.name }}},
{%- endfor %}
{%- for a in aliases %}
    {"{{ a.alias }}", unpack_{{ a.alias }}},
{%- endfor %}
    { NULL, NULL }
};

static
PyObject *py_unpack(PyObject *self, PyObject *const *args, Py_ssize_t nargs)
{
    if (!PyUnicode_Check(args[0])) {
        PyErr_SetString(PyExc_TypeError, "expected a bytes object");
        return NULL;
    }
    Py_ssize_t tn_len;
    const char *type_name = PyUnicode_AsUTF8AndSize(args[0], &tn_len);

    if (!PyBytes_Check(args[1])) {
        PyErr_SetString(PyExc_TypeError, "expected a bytes object");
        return NULL;
    }
    Py_ssize_t buf_len;
    char *buf;
    PyBytes_AsStringAndSize(args[1], &buf, &buf_len);

    // check type name for modifiers
    bool is_array = tn_len >= 2 &&
                    type_name[tn_len - 1] == ']' &&
                    type_name[tn_len - 2] == '[';

    const char *base = type_name;
    char local_buf[256];  // only used when we need to strip modifiers
    if (is_array) {
        memcpy(local_buf, type_name, tn_len - 2);
        local_buf[tn_len - 2] = '\0';
        base = local_buf;
    }

    // locate the base-typeâ€™s unpack function
    unpack_fn_t fn = NULL;
    for (const struct dispatch_entry *it = _DISPATCH; it->name; ++it)
        if (strcmp(base, it->name) == 0) {
            fn = it->ufn;
            break;
        }

    if (!fn) {
        PyErr_Format(PyExc_ValueError,
                     "unknown type '%s'", type_name);
        return NULL;
    }

    // no modifiers, just delegate
    if (!is_array) {
        size_t consumed = 0;
        return fn(buf, (size_t)buf_len, &consumed);
    }

    // array path
    size_t arr_varint_len = 0;
    unsigned long long arr_len = decode_varuint32(buf, &arr_varint_len);
    if (arr_len < 0) {
        PyErr_SetString(PyExc_ValueError, "buffer too short for ULEB128 length");
        return NULL;
    }

    size_t offset = arr_varint_len;

    PyObject *list = PyList_New((Py_ssize_t)arr_len);
    if (!list)
        return NULL;

    for (uint64_t i = 0; i < arr_len; i++) {
        size_t consumed = 0;
        PyObject *item = fn(buf + offset, buf_len - offset, &consumed);
        offset += consumed;
        if (!item) {  // fn should of already set an exception
            Py_DECREF(list);
            return NULL;
        }

        if (PyList_SetItem(list, (Py_ssize_t)i, item) < 0) {  // steal ref
            PyErr_SetString(PyExc_ValueError, "could not set item on list");
            Py_DECREF(item);
            Py_DECREF(list);
            return NULL;
        }

        #ifdef __JITABI_DEBUG
        if (offset > (size_t)buf_len) {
            Py_DECREF(list);
            PyErr_SetString(PyExc_ValueError, "buffer ended mid-array");
            return NULL;
        }
        #endif
    }

    return list;
}

#endif

#ifdef __JITABI_PACK

#define JITABI_PACK_INITIAL_BUF_SIZE (8 * 1024 * 1024)

{% include "pack_std.c" %}

// forward declarations
{% for f in functions %}
static ssize_t pack_{{ f.name }}(PyObject *object, char *destination, size_t dst_len);
{% endfor -%}
{% for a in aliases %}
static ssize_t pack_{{ a.alias }}(PyObject *object, char *destination, size_t dst_len);
{% endfor -%}

{% for f in functions %}

{{ f.pack_code }}
{%- endfor -%}
{% for a in aliases %}

{{ a.pack_code }}
{%- endfor %}


#define DEF_PACK_WRAPPER(pyname, cfunc)                                    \
    static PyObject *pyname(PyObject *self, PyObject *arg)                 \
    {                                                                      \
        Py_ssize_t cap = (JITABI_PACK_INITIAL_BUF_SIZE);                   \
        PyObject *bytes = PyBytes_FromStringAndSize(NULL, cap);            \
        if (!bytes)                                                        \
            return NULL;                                                   \
                                                                           \
        for (int attempts = 0; attempts < 5; ++attempts) {                 \
            char *buf = PyBytes_AS_STRING(bytes);                          \
            ssize_t written = cfunc(arg, buf, (size_t)cap);                \
                                                                           \
            /* success: shrink to actual size and return */                \
            if (written >= 0) {                                            \
                if (written > cap) { /* impossible if packer is correct */ \
                    Py_DECREF(bytes);                                      \
                    PyErr_SetString(                                       \
                        PyExc_RuntimeError,                                \
                        "packer returned size larger than buffer"          \
                    );                                                     \
                    return NULL;                                           \
                }                                                          \
                /* shrink, ignore fail */                                  \
                _PyBytes_Resize(&bytes, written);                          \
                return bytes;                                              \
            }                                                              \
                                                                           \
            /* failure for any reason *other* than buffer-too-small */     \
            if (!PyErr_ExceptionMatches(PyExc_ValueError)) {               \
                Py_DECREF(bytes);                                          \
                return NULL;                                               \
            }                                                              \
                                                                           \
            /* Look for the specific diagnostic we set in the packer.      \
               You could give your packers a dedicated error subclass      \
               instead, but a string check keeps it light-weight. */       \
            if (!PyErr_Occurred() ||                                       \
                strstr(PyUnicode_AsUTF8(PyObject_Str(PyErr_Occurred())),   \
                       "output buffer too small") == NULL) {               \
                Py_DECREF(bytes);                                          \
                return NULL;                                               \
            }                                                              \
                                                                           \
            /* Clear the ValueError and grow the buffer Ã—2 */              \
            PyErr_Clear();                                                 \
            cap *= 2;                                                      \
            if (_PyBytes_Resize(&bytes, cap) < 0) {                        \
                Py_DECREF(bytes);                                          \
                PyErr_SetString(                                           \
                    PyExc_RuntimeError,                                    \
                    "failed to resize buffer"                              \
                );                                                         \
                return NULL;                                               \
            }                                                              \
        }                                                                  \
                                                                           \
        Py_DECREF(bytes);                                                  \
        PyErr_SetString(                                                   \
            PyExc_RuntimeError,                                            \
            "exceeded maximum resize attempts in pack wrapper"             \
        );                                                                 \
        return NULL;                                                       \
    }

// structs & enums
{%- for f in functions %}
DEF_PACK_WRAPPER (py_pack_{{ f.name }}, pack_{{ f.name }})
{%- endfor %}

// aliases
{%- for a in aliases %}
DEF_PACK_WRAPPER (py_pack_{{ a.alias }}, pack_{{ a.alias }})
{%- endfor %}

#endif


static PyMethodDef Methods[] = {
    #ifdef __JITABI_UNPACK
    // dynamic dispatch
    {
        "unpack",
        (PyCFunction)py_unpack,
        METH_FASTCALL,
        "dispatch-to-type unpack(bytes) helper"
    },

    // structs & enums
    {%- for f in functions %}
    {"unpack_{{ f.name }}", py_unpack_{{ f.name }}, METH_O, "unpack structure {{ f.name }}"},
    {%- endfor %}

    // aliases
    {%- for a in aliases %}
    {"unpack_{{ a.alias }}", py_unpack_{{ a.alias }}, METH_O, "unpack alias {{ a.alias }}"},
    {%- endfor %}

    #endif

    #ifdef __JITABI_PACK
    // structs & enums
    {%- for f in functions %}
    {"pack_{{ f.name }}",   py_pack_{{ f.name }},   METH_O, "pack structure {{ f.name }}"},
    {%- endfor %}

    // aliases
    {%- for a in aliases %}
    {"pack_{{ a.alias }}",   py_pack_{{ a.alias }},   METH_O, "pack alias {{ a.alias }}"},
    {%- endfor %}
    #endif

    // sentinel
    {NULL, NULL, 0, NULL}
};

static struct PyModuleDef module_def = {
    PyModuleDef_HEAD_INIT,
    "{{ m_name }}",
    "{{ m_doc }}",
    -1,
    Methods,
#ifdef __JITABI_DEBUG
    NULL,       // m_slots
    NULL,       // m_traverse
    NULL,       // m_clear
    module_free // m_free
#else
    NULL, NULL, NULL, NULL
#endif
};

PyMODINIT_FUNC
PyInit_{{ m_name }}(void)
{
#ifdef __JITABI_DEBUG
    if (init_logging_handles() < 0) return NULL;
#endif
    return PyModule_Create(&module_def);
}
