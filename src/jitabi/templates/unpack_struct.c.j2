{%- import "macros.c.j2" as m -%}

{%- macro unpack_fn(call, indent_count=4) -%}
unpack_{{ call.resolved_name }}(
{%- call m.indent(indent_count) %}
    b + __total,
    {%- for a in call.args %}
    {{ a }},
    {% endfor %}
    buf_len - __total,
    &__consumed
);
{% endcall %}
{%- endmacro -%}

{%- macro unpack_field(f) -%}
    {{ m.debug_field(f) }}

    {% if f.call.modifier.name == "NONE" -%}

    ____{{ f.name }} = {{ unpack_fn(f.call) }}
    if (!____{{ f.name }}) goto error;
    __total += __consumed;

    {%- elif f.call.modifier.name == "OPTIONAL" -%}

    if (__total >= buf_len) goto error;
    uint8_t __flag_____{{ f.name }} = b[__total++];

    #ifdef __JITABI_DEBUG
        JITABI_LOG_DEBUG(
            "optional: %u delta: %lu",
            __flag_____{{ f.name }},
            __total - __start_total
        );
        __start_total = __total;
    #endif

    if (__flag_____{{ f.name }}) {
        ____{{ f.name }} = {{ unpack_fn(f.call, indent_count=8) }}
        if (!____{{ f.name }}) goto error;
        __total += __consumed;
    } else {
        Py_INCREF(Py_None);
        ____{{ f.name }} = Py_None;
    }

    {%- elif f.call.modifier.name == "EXTENSION" -%}

    #ifdef __JITABI_DEBUG
        JITABI_LOG_DEBUG(
            "pre extension buf_len: %lu, total: %lu delta: %lu",
            buf_len,
            __total,
            __total - __start_total
        );
        __start_total = __total;
    #endif

    if (buf_len - 1 > __total) {
        ____{{ f.name }} = {{ unpack_fn(f.call, indent_count=8) }}
        if (!____{{ f.name }}) goto error;
        __total += __consumed;
    } else {
        Py_INCREF(Py_None);
        ____{{ f.name }} = Py_None;
    }

    #ifdef __JITABI_DEBUG
        JITABI_LOG_DEBUG(
            "post extension buf_len: %lu, total: %lu delta: %lu",
            buf_len,
            __total,
            __total - __start_total
        );
        __start_total = __total;
    #endif

    {%- elif f.call.modifier.name == "ARRAY" -%}

    size_t __len_____{{ f.name }} = decode_varuint32(b + __total, &__consumed);
    __total += __consumed;

    ____{{ f.name }} = PyList_New(__len_____{{ f.name }});
    if (!____{{ f.name }}) goto error;

    JITABI_LOG_DEBUG("array of size: %lu", __len_____{{ f.name }});

    for (size_t _i = 0; _i < __len_____{{ f.name }}; ++_i) {
        PyObject *_item = {{ unpack_fn(f.call, indent_count=8) }}
        if (!_item) { Py_DECREF(____{{ f.name }}); goto error; }
        __total += __consumed;
        PyList_SetItem(____{{ f.name }}, _i, _item);
    }

    {%- else %}
        /* unreachable */
    {%- endif %}

    JITABI_LOG_DEBUG(
        "{{ f.name }} start: %lu, size: %lu, total: %lu",
        __start_total,
        __total - __start_total,
        __total
    );
{%- endmacro -%}

JITABI_INLINE
PyObject *unpack_{{ fn_name }}(const char *b, size_t buf_len, size_t *c)
{
{% if fields|length > 0 %}
    size_t __consumed = 0;
    size_t __total = 0;
    #ifdef __JITABI_DEBUG
    size_t __start_total = 0;
    #endif

    JITABI_LOG_DEBUG(
        {%- if base -%}
        "UNPACK struct {{ fn_name }} with base {{ base }}, buf_len: %lu",
        {%- else -%}
        "UNPACK struct {{ fn_name }}, buf_len: %lu",
        {%- endif %} buf_len
    );

{% if base %}
    // start from base dict
    PyObject *__dict = unpack_{{ base }}(b, buf_len, &__consumed);
    if (!__dict) goto error;
    __total += __consumed;

{%- else %}
    // build python dict
    PyObject *__dict = PyDict_New();
    if (!__dict) goto error;

{%- endif %}
{% for f in fields %}
    PyObject *____{{ f.name }} = NULL;
{%- endfor %}
{% for f in fields -%}
    {{ unpack_field(f) }}
{% endfor %}
    // -------- end of fields unpacking ---------

    // set total bytes consumed
    if (c) *c = __total;

    // set items
{%- for f in fields %}
    if (PyDict_SetItemString(__dict, "{{ f.name }}", ____{{ f.name }}) < 0) goto error;
{%- endfor %}

    JITABI_LOG_DEBUG("fields set on dict");

    // drop local refs now owned by dict
{%- for f in fields %}
    Py_DECREF(____{{ f.name }});
{%- endfor %}
    return __dict;

error:
    PyErr_SetString(PyExc_RuntimeError, "While unpacking {{ fn_name }}");
{%- for f in fields %}
    Py_XDECREF(____{{ f.name }});
{%- endfor %}
    Py_XDECREF(__dict);
    return NULL;
{% else %}
    return PyDict_New();
{% endif %}
}
