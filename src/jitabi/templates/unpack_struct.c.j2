{%- import "macros.c.j2" as m -%}

{%- macro unpack_fn(call, indent_count=4) -%}
unpack_{{ call.resolved_name }}(
{%- call m.indent(indent_count) %}
    b + __total,
    buf_len - __total,
    &__consumed
);
{% endcall %}
{%- endmacro -%}


{# -------------------------------------------------------------------------
   recursively render a chain of modifiers
   mods   : list/tuple ordered [outer, ... inner]
   target : C identifier that will receive the decoded PyObject*
   ctx    : short unique token used to derive temp-var names
   ------------------------------------------------------------------------- #}
{%- macro unpack_mod_chain(call, mods, target, depth, ctx) -%}
{%- if mods|length == 0 %}
    {{ target }} = {{ unpack_fn(call, indent_count=depth) }}
    if (!{{ target }}) goto error;
    __total += __consumed;
{%- else -%}
{%- call m.indent(depth) %}
{% set outer = mods[0] %}
{% set inner = mods[1:] %}
{%- if outer == 'optional' -%}
if (__total >= buf_len) goto error;
uint8_t __flag_{{ ctx }} = b[__total++];
JITABI_LOG_DEBUG("optional: %u", __flag_{{ ctx }});
if (__flag_{{ ctx }}) {
{{- unpack_mod_chain(call, inner, target, depth, ctx ~ '_opt') }}
} else {
    Py_INCREF(Py_None);
    {{ target }} = Py_None;
}
{%- elif outer == 'extension' -%}
JITABI_LOG_DEBUG("pre extension buf_len: %lu total: %lu", buf_len, __total);
if (buf_len - __total > 0) {
{{- unpack_mod_chain(call, inner, target, depth, ctx ~ '_ext') }}
} else {
    Py_INCREF(Py_None);
    {{ target }} = Py_None;
}
JITABI_LOG_DEBUG("post extension buf_len: %lu total: %lu", buf_len, __total);
{%- elif outer == 'array' -%}
size_t __len_{{ ctx }} = decode_varuint32(b + __total, &__consumed);
__total += __consumed;
{{ target }} = PyList_New(__len_{{ ctx }});
if (!{{ target }}) goto error;
JITABI_LOG_DEBUG("array size: %lu", __len_{{ ctx }});
for (size_t _i = 0; _i < __len_{{ ctx }}; ++_i) {
    PyObject *_item = NULL;
    {{- unpack_mod_chain(call, inner, '_item', depth, ctx ~ '_arr') }}
    if (!_item) { Py_DECREF({{ target }}); goto error; }
    PyList_SetItem({{ target }}, _i, _item);
}
{%- else -%}
/* unsupported modifier */
{%- endif %}
{% endcall %}
{%- endif -%}
{%- endmacro -%}


{# -------------------------------------------------------------------------
   render a single struct field
   ------------------------------------------------------------------------- #}
{%- macro unpack_field(f) -%}
    {{- m.debug_field(f) }}

    {{- unpack_mod_chain(f.call, f.call.modifiers, '____' ~ f.name, 4, f.name) }}
    JITABI_LOG_DEBUG(
        "{{ f.name }} decoded, total: %lu",
        __total
    );
{%- endmacro -%}

static PyObject *unpack_{{ fn_name }}(const char *b, size_t buf_len, size_t *c)
{
{% if fields|length > 0 %}
    size_t __consumed = 0;
    size_t __total = 0;

    JITABI_LOG_DEBUG(
        {%- if base -%}
        "UNPACK struct {{ fn_name }} with base {{ base }}, buf_len: %lu",
        {%- else -%}
        "UNPACK struct {{ fn_name }}, buf_len: %lu",
        {%- endif %} buf_len
    );

{% if base %}
    /* start from base dict */
    PyObject *__dict = unpack_{{ base }}(b, buf_len, &__consumed);
    if (!__dict) goto error;
    __total += __consumed;
{% else %}
    /* build python dict */
    PyObject *__dict = PyDict_New();
    if (!__dict) goto error;
{% endif %}

{% for f in fields %}
    PyObject *____{{ f.name }} = NULL;
{% endfor %}

{% for f in fields %}
{{ unpack_field(f) }}
{%- endfor %}
    /* -------- end of fields unpacking --------- */

    if (c) *c = __total;     /* total bytes consumed */

    /* set items on dict */
{% for f in fields %}
    if (PyDict_SetItemString(__dict, "{{ f.name }}", ____{{ f.name }}) < 0) goto error;
{% endfor %}

    /* drop local refs â€“ dict owns them now */
{% for f in fields %}
    Py_DECREF(____{{ f.name }});
{% endfor %}
    return __dict;

error:
    PyErr_SetString(PyExc_RuntimeError, "While unpacking {{ fn_name }}");
{% for f in fields %}
    Py_XDECREF(____{{ f.name }});
{% endfor %}
    Py_XDECREF(__dict);
    return NULL;
{% else %}
    (void)b; (void)buf_len; (void)c;
    return PyDict_New();
{% endif %}
}
